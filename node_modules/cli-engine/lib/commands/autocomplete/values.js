'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cliEngineCommand = require('cli-engine-command');

var _ = require('.');

var _2 = _interopRequireDefault(_);

var _plugins = require('../../plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _cache = require('../../cache');

var _cache2 = _interopRequireDefault(_cache);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AutocompleteValues extends _2.default {

  async run() {
    try {
      this.errorIfWindows();

      if (!this.flags.cmd) this.out.error('Missing required value for --cmd');
      if (!this.flags.flag) this.out.error('Missing required value for --flag');

      const plugins = new _plugins2.default(this.out);
      await plugins.load();
      let Command = await plugins.findCommand(this.flags.cmd);
      if (!Command) this.out.error(`Command ${this.flags.cmd} not found`);
      let long = this.flags.flag.replace(/^-+/, '');
      let flags = Command ? Command.flags : {};
      let flag = flags[long];
      if (!flag) this.out.error(`Flag ${long} not found`);
      if (flag.completion && flag.completion.options) {
        let flagCache = _path2.default.join(this.completionsPath, long);
        let duration = flag.completion.cacheDuration || 60 * 60 * 24; // 1 day
        let opts = { cacheFn: () => flag.completion.options(this.out) };
        let options = await _cache2.default.fetch(flagCache, duration, opts);
        this.out.log((options || []).join('\n'));
      }
    } catch (err) {
      // fail silently
      // or autocomplete will use error as options
      this.out.logError(err);
    }
  }
}
exports.default = AutocompleteValues;
AutocompleteValues.topic = 'autocomplete';
AutocompleteValues.command = 'values';
AutocompleteValues.description = 'generates autocomplete values';
AutocompleteValues.hidden = true;
AutocompleteValues.flags = {
  // don't require cmd or flag
  // we want it to run silently
  // or autocomplete will use any
  // flag errors as options
  cmd: _cliEngineCommand.flags.string({ description: '', char: 'c' }),
  flag: _cliEngineCommand.flags.string({ description: '', char: 'f' })
};